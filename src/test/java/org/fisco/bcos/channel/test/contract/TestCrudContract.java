package org.fisco.bcos.channel.test.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple11;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class TestCrudContract extends Contract {
    public static String BINARY = "";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_methodName\",\"type\":\"string\"}],\"name\":\"validPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\"}],\"name\":\"registerParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountAddress\",\"type\":\"address\"},{\"name\":\"_methodName\",\"type\":\"string\"}],\"name\":\"addPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_couponType\",\"type\":\"uint256\"}],\"name\":\"verifyCouponType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"string\"},{\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareString\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"}],\"name\":\"unregisterParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"uintTostring\",\"outputs\":[{\"name\":\"c\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_batchIdStr\",\"type\":\"string\"}],\"name\":\"getBatchNum\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_couponType\",\"type\":\"uint256\"}],\"name\":\"addSupportCouponType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"bytes\"},{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"compareBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchIdStr\",\"type\":\"string\"}],\"name\":\"verfiyBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchIdStr\",\"type\":\"string\"},{\"name\":\"_ownerMerchantAddress\",\"type\":\"address\"},{\"name\":\"_secretKey\",\"type\":\"bytes\"},{\"name\":\"_couponType\",\"type\":\"uint256\"},{\"name\":\"_status\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_allowUseStartTime\",\"type\":\"uint256\"},{\"name\":\"_allowUseEndTime\",\"type\":\"uint256\"},{\"name\":\"_rule\",\"type\":\"bytes\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isSuccess\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"LogEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"logInfo\",\"type\":\"bytes\"}],\"name\":\"SIMPLE_LOG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_couponType\",\"type\":\"uint256\"}],\"name\":\"OPERATE_ADD_SUPPORT_COUPON_TYPE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ownerMerchantAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_batchId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_couponType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_allowUseStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_allowUseEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rule\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"OPERATE_COUPON_BATCH_CREATE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"OPERATE_COUPON_BATCH_SET_STATUS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"OPERATE_COUPON_BATCH_SET_COUNT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"consumerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"couponAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"obtainTime\",\"type\":\"uint256\"}],\"name\":\"OPERATE_RECEIVE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"obtainTime\",\"type\":\"uint256\"}],\"name\":\"OPERATE_TRANSFER\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"cancelUserAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"consumeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"consumeAmount\",\"type\":\"uint256\"}],\"name\":\"OPERATE_CANCEL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"cancelUserAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"consumeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"consumeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"couponAmount\",\"type\":\"uint256\"}],\"name\":\"OPERATE_CANCEL_M\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"}],\"name\":\"OPERATE_EXPIRE\",\"type\":\"event\"}]";

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static String SM_BINARY = "";

    public static final String FUNC_VALIDPERMISSION = "validPermission";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_ADDPERMISSION = "addPermission";

    public static final String FUNC_VERIFYCOUPONTYPE = "verifyCouponType";

    public static final String FUNC_COMPARESTRING = "compareString";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_UINTTOSTRING = "uintTostring";

    public static final String FUNC_GETBATCHNUM = "getBatchNum";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_ADDSUPPORTCOUPONTYPE = "addSupportCouponType";

    public static final String FUNC_COMPAREBYTES = "compareBytes";

    public static final String FUNC_VERFIYBATCH = "verfiyBatch";

    public static final String FUNC_CREATE = "create";

    public static final Event LOGEVENT_EVENT = new Event("LogEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SIMPLE_LOG_EVENT = new Event("SIMPLE_LOG", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event OPERATE_ADD_SUPPORT_COUPON_TYPE_EVENT = new Event("OPERATE_ADD_SUPPORT_COUPON_TYPE", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_COUPON_BATCH_CREATE_EVENT = new Event("OPERATE_COUPON_BATCH_CREATE", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_COUPON_BATCH_SET_STATUS_EVENT = new Event("OPERATE_COUPON_BATCH_SET_STATUS", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_COUPON_BATCH_SET_COUNT_EVENT = new Event("OPERATE_COUPON_BATCH_SET_COUNT", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_RECEIVE_EVENT = new Event("OPERATE_RECEIVE", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_TRANSFER_EVENT = new Event("OPERATE_TRANSFER", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_CANCEL_EVENT = new Event("OPERATE_CANCEL", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_CANCEL_M_EVENT = new Event("OPERATE_CANCEL_M", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_EXPIRE_EVENT = new Event("OPERATE_EXPIRE", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected TestCrudContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TestCrudContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TestCrudContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TestCrudContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<Boolean> validPermission(String _methodName) {
        final Function function = new Function(FUNC_VALIDPERMISSION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_methodName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> registerParallelFunction(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(criticalSize)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerParallelFunction(String functionName, BigInteger criticalSize, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(criticalSize)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerParallelFunctionSeq(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(criticalSize)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getRegisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> addPermission(String _accountAddress, String _methodName) {
        final Function function = new Function(
                FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_accountAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_methodName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addPermission(String _accountAddress, String _methodName, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_accountAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_methodName)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addPermissionSeq(String _accountAddress, String _methodName) {
        final Function function = new Function(
                FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_accountAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_methodName)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getAddPermissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getAddPermissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> verifyCouponType(BigInteger _couponType) {
        final Function function = new Function(
                FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyCouponType(BigInteger _couponType, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyCouponTypeSeq(BigInteger _couponType) {
        final Function function = new Function(
                FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getVerifyCouponTypeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getVerifyCouponTypeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<Boolean> compareString(String a, String b) {
        final Function function = new Function(FUNC_COMPARESTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(a), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> unregisterParallelFunction(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unregisterParallelFunctionSeq(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getUnregisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<String> uintTostring(BigInteger i) {
        final Function function = new Function(FUNC_UINTTOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getBatchNum(String _batchIdStr) {
        final Function function = new Function(FUNC_GETBATCHNUM, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> enableParallel() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void enableParallel(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String enableParallelSeq() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> addSupportCouponType(BigInteger _couponType) {
        final Function function = new Function(
                FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addSupportCouponType(BigInteger _couponType, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addSupportCouponTypeSeq(BigInteger _couponType) {
        final Function function = new Function(
                FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getAddSupportCouponTypeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getAddSupportCouponTypeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<Boolean> compareBytes(byte[] a, byte[] b) {
        final Function function = new Function(FUNC_COMPAREBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(a), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> verfiyBatch(String _batchIdStr) {
        final Function function = new Function(
                FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verfiyBatch(String _batchIdStr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verfiyBatchSeq(String _batchIdStr) {
        final Function function = new Function(
                FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getVerfiyBatchInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getVerfiyBatchOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> create(String _batchIdStr, String _ownerMerchantAddress, byte[] _secretKey, BigInteger _couponType, BigInteger _status, BigInteger _startTime, BigInteger _endTime, BigInteger _allowUseStartTime, BigInteger _allowUseEndTime, byte[] _rule, BigInteger _count) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_ownerMerchantAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_secretKey), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_startTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_endTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseStartTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseEndTime), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_rule), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void create(String _batchIdStr, String _ownerMerchantAddress, byte[] _secretKey, BigInteger _couponType, BigInteger _status, BigInteger _startTime, BigInteger _endTime, BigInteger _allowUseStartTime, BigInteger _allowUseEndTime, byte[] _rule, BigInteger _count, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_ownerMerchantAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_secretKey), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_startTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_endTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseStartTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseEndTime), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_rule), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_count)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createSeq(String _batchIdStr, String _ownerMerchantAddress, byte[] _secretKey, BigInteger _couponType, BigInteger _status, BigInteger _startTime, BigInteger _endTime, BigInteger _allowUseStartTime, BigInteger _allowUseEndTime, byte[] _rule, BigInteger _count) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_ownerMerchantAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_secretKey), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_startTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_endTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseStartTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseEndTime), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_rule), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_count)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple11<String, String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger> getCreateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple11<String, String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (BigInteger) results.get(8).getValue(), 
                (byte[]) results.get(9).getValue(), 
                (BigInteger) results.get(10).getValue()
                );
    }

    public List<LogEventEventResponse> getLogEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGEVENT_EVENT, transactionReceipt);
        ArrayList<LogEventEventResponse> responses = new ArrayList<LogEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogEventEventResponse typedResponse = new LogEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.desc = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerLogEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SIMPLE_LOGEventResponse> getSIMPLE_LOGEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIMPLE_LOG_EVENT, transactionReceipt);
        ArrayList<SIMPLE_LOGEventResponse> responses = new ArrayList<SIMPLE_LOGEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SIMPLE_LOGEventResponse typedResponse = new SIMPLE_LOGEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.logInfo = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSIMPLE_LOGEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SIMPLE_LOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerSIMPLE_LOGEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SIMPLE_LOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse> getOPERATE_ADD_SUPPORT_COUPON_TYPEEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_ADD_SUPPORT_COUPON_TYPE_EVENT, transactionReceipt);
        ArrayList<OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse> responses = new ArrayList<OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse typedResponse = new OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._couponType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_ADD_SUPPORT_COUPON_TYPEEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_ADD_SUPPORT_COUPON_TYPE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_ADD_SUPPORT_COUPON_TYPEEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_ADD_SUPPORT_COUPON_TYPE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_COUPON_BATCH_CREATEEventResponse> getOPERATE_COUPON_BATCH_CREATEEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_COUPON_BATCH_CREATE_EVENT, transactionReceipt);
        ArrayList<OPERATE_COUPON_BATCH_CREATEEventResponse> responses = new ArrayList<OPERATE_COUPON_BATCH_CREATEEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_COUPON_BATCH_CREATEEventResponse typedResponse = new OPERATE_COUPON_BATCH_CREATEEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._ownerMerchantAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._batchId = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._couponType = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._status = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._startTime = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse._endTime = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse._allowUseStartTime = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse._allowUseEndTime = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
            typedResponse._rule = (byte[]) eventValues.getNonIndexedValues().get(10).getValue();
            typedResponse._count = (BigInteger) eventValues.getNonIndexedValues().get(11).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_COUPON_BATCH_CREATEEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_CREATE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_COUPON_BATCH_CREATEEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_CREATE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_COUPON_BATCH_SET_STATUSEventResponse> getOPERATE_COUPON_BATCH_SET_STATUSEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_COUPON_BATCH_SET_STATUS_EVENT, transactionReceipt);
        ArrayList<OPERATE_COUPON_BATCH_SET_STATUSEventResponse> responses = new ArrayList<OPERATE_COUPON_BATCH_SET_STATUSEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_COUPON_BATCH_SET_STATUSEventResponse typedResponse = new OPERATE_COUPON_BATCH_SET_STATUSEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.batchId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_COUPON_BATCH_SET_STATUSEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_SET_STATUS_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_COUPON_BATCH_SET_STATUSEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_SET_STATUS_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_COUPON_BATCH_SET_COUNTEventResponse> getOPERATE_COUPON_BATCH_SET_COUNTEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_COUPON_BATCH_SET_COUNT_EVENT, transactionReceipt);
        ArrayList<OPERATE_COUPON_BATCH_SET_COUNTEventResponse> responses = new ArrayList<OPERATE_COUPON_BATCH_SET_COUNTEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_COUPON_BATCH_SET_COUNTEventResponse typedResponse = new OPERATE_COUPON_BATCH_SET_COUNTEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.batchId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_COUPON_BATCH_SET_COUNTEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_SET_COUNT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_COUPON_BATCH_SET_COUNTEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_SET_COUNT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_RECEIVEEventResponse> getOPERATE_RECEIVEEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_RECEIVE_EVENT, transactionReceipt);
        ArrayList<OPERATE_RECEIVEEventResponse> responses = new ArrayList<OPERATE_RECEIVEEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_RECEIVEEventResponse typedResponse = new OPERATE_RECEIVEEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.batchId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.consumerAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.couponAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.obtainTime = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_RECEIVEEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_RECEIVE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_RECEIVEEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_RECEIVE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_TRANSFEREventResponse> getOPERATE_TRANSFEREvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_TRANSFER_EVENT, transactionReceipt);
        ArrayList<OPERATE_TRANSFEREventResponse> responses = new ArrayList<OPERATE_TRANSFEREventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_TRANSFEREventResponse typedResponse = new OPERATE_TRANSFEREventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.fromAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.toAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.obtainTime = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_TRANSFEREventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_TRANSFER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_TRANSFEREventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_TRANSFER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_CANCELEventResponse> getOPERATE_CANCELEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_CANCEL_EVENT, transactionReceipt);
        ArrayList<OPERATE_CANCELEventResponse> responses = new ArrayList<OPERATE_CANCELEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_CANCELEventResponse typedResponse = new OPERATE_CANCELEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.cancelUserAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.consumeTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.consumeAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_CANCELEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_CANCEL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_CANCELEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_CANCEL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_CANCEL_MEventResponse> getOPERATE_CANCEL_MEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_CANCEL_M_EVENT, transactionReceipt);
        ArrayList<OPERATE_CANCEL_MEventResponse> responses = new ArrayList<OPERATE_CANCEL_MEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_CANCEL_MEventResponse typedResponse = new OPERATE_CANCEL_MEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.cancelUserAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.consumeTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.consumeAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.couponAmount = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_CANCEL_MEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_CANCEL_M_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_CANCEL_MEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_CANCEL_M_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_EXPIREEventResponse> getOPERATE_EXPIREEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_EXPIRE_EVENT, transactionReceipt);
        ArrayList<OPERATE_EXPIREEventResponse> responses = new ArrayList<OPERATE_EXPIREEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_EXPIREEventResponse typedResponse = new OPERATE_EXPIREEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_EXPIREEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_EXPIRE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_EXPIREEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_EXPIRE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static TestCrudContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TestCrudContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TestCrudContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TestCrudContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TestCrudContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TestCrudContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TestCrudContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TestCrudContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TestCrudContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TestCrudContract.class, web3j, credentials, contractGasProvider, getBinary(), "");
    }

    public static RemoteCall<TestCrudContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TestCrudContract.class, web3j, transactionManager, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<TestCrudContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TestCrudContract.class, web3j, credentials, gasPrice, gasLimit, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<TestCrudContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TestCrudContract.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), "");
    }

    public static class LogEventEventResponse {
        public Log log;

        public Boolean isSuccess;

        public String desc;
    }

    public static class SIMPLE_LOGEventResponse {
        public Log log;

        public byte[] logInfo;
    }

    public static class OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse {
        public Log log;

        public String operateAddress;

        public BigInteger _couponType;
    }

    public static class OPERATE_COUPON_BATCH_CREATEEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public String _ownerMerchantAddress;

        public String _batchId;

        public BigInteger _couponType;

        public BigInteger _status;

        public BigInteger _startTime;

        public BigInteger _endTime;

        public BigInteger _allowUseStartTime;

        public BigInteger _allowUseEndTime;

        public byte[] _rule;

        public BigInteger _count;
    }

    public static class OPERATE_COUPON_BATCH_SET_STATUSEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public BigInteger batchId;
    }

    public static class OPERATE_COUPON_BATCH_SET_COUNTEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public BigInteger batchId;

        public BigInteger count;
    }

    public static class OPERATE_RECEIVEEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public BigInteger batchId;

        public String consumerAddress;

        public byte[] couponId;

        public BigInteger couponAmount;

        public BigInteger obtainTime;
    }

    public static class OPERATE_TRANSFEREventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public String fromAddress;

        public String toAddress;

        public byte[] couponId;

        public BigInteger obtainTime;
    }

    public static class OPERATE_CANCELEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public byte[] couponId;

        public String cancelUserAddress;

        public BigInteger consumeTime;

        public BigInteger consumeAmount;
    }

    public static class OPERATE_CANCEL_MEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public byte[] couponId;

        public String cancelUserAddress;

        public BigInteger consumeTime;

        public BigInteger consumeAmount;

        public BigInteger couponAmount;
    }

    public static class OPERATE_EXPIREEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public byte[] couponId;
    }
}
