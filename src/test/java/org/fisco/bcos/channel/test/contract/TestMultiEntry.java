package org.fisco.bcos.channel.test.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple11;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class TestMultiEntry extends Contract {
    public static final String[] BINARY_ARRAY = {"","808060010191505061070f565b81151515610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a90618831565b60405180910390fd5b5b8285908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061087092919061570e565b505082600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080546108c092919061578e565b506001935050505092915050565b600060019050919050565b60006060808491508390506108ee828261159e565b9250505092915050565b600061100690508073ffffffffffffffffffffffffffffffffffffffff166311e3f2af30846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109569291906178b0565b602060405180830381600087803b15801561097057600080fd5b505af1158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109a89190810190615bba565b505050565b606060008060606000808614156109fb576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509450610afb565b8593505b600084141515610a25578280600101935050600a84811515610a1d57fe5b0493506109ff565b826040519080825280601f01601f191660200182016040528015610a585781602001602082028038833980820191505090505b5091506001830390505b600086141515610af757600a86811515610a7857fe5b066030017f010000000000000000000000000000000000000000000000000000000000000002828280600190039350815181101515610ab357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86811515610aef57fe5b049550610a62565b8194505b50505050919050565b60008060008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280601181526020017f745f636f75706f6e5f62617463685f76360000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bba91906179ab565b602060405180830381600087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c0c9190810190615b91565b95508573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c7257600080fd5b505af1158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610caa9190810190615b16565b94508573ffffffffffffffffffffffffffffffffffffffff1663e8434e3989876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d039291906179ef565b602060405180830381600087803b158015610d1d57600080fd5b505af1158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d559190810190615b3f565b935060009250600091505b8373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dc457600080fd5b505af1158015610dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dfc9190810190615bba565b821215610f5e578373ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e589190617990565b602060405180830381600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610eaa9190810190615b68565b90508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610eff906189ef565b602060405180830381600087803b158015610f1957600080fd5b505af1158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f519190810190615bba565b9250816001019150610d60565b829650505050505050919050565b610ff9608060405190810160405280605a81526020017f63726561746528737472696e672c616464726573732c62797465732c75696e7481526020017f3235362c75696e743235362c75696e743235362c75696e743235362c75696e7481526020017f3235362c75696e743235362c62797465732c75696e74323536290000000000008152506001610568565b565b6000806000806000806110426040805190810160405280601481526020017f616464537570706f7274436f75706f6e54797065000000000000000000000000815250610381565b1515611083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107a906181b9565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280601881526020017f745f737570706f72745f636f75706f6e5f747970655f763600000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161112e91906179ab565b602060405180830381600087803b15801561114857600080fd5b505af115801561115c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111809190810190615b91565b94508473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061121e9190810190615b16565b93508473ffffffffffffffffffffffffffffffffffffffff1663e8434e39611245896109ad565b866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161127f9291906179ef565b602060405180830381600087803b15801561129957600080fd5b505af11580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112d19190810190615b3f565b925060008373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113719190810190615bba565b13156113805760009550611594565b8473ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113e457600080fd5b505af11580156113f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061141c9190810190615b68565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161147190617d2f565b600060405180830381600087803b15801561148b57600080fd5b505af115801561149f573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff166331afac366114c8896109ad565b846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611502929190617a1f565b602060405180830381600087803b15801561151c57600080fd5b505af1158015611530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115549190810190615bba565b90507f947e77308b87066799be84005794f388c9392787190a74c9bfa8f88b3e47f7f3338860405161158792919061791e565b60405180910390a1600195505b5050505050919050565b6000815183511415156115b45760009050611686565b816040518082805190602001908083835b6020831015156115ea57805182526020820191506020810190506020830392506115c5565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040518082805190602001908083835b602083101515611651578051825260208201915060208101905060208303925061162c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161490505b92915050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280601181526020017f745f636f75706f6e5f62617463685f76360000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161173d91906179ab565b602060405180830381600087803b15801561175757600080fd5b505af115801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061178f9190810190615b91565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016020604051808303","81600087803b1580156117f557600080fd5b505af1158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061182d9190810190615b16565b91508273ffffffffffffffffffffffffffffffffffffffff1663e8434e3986846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118869291906179ef565b602060405180830381600087803b1580156118a057600080fd5b505af11580156118b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118d89190810190615b3f565b905060019350505050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280601181526020017f745f636f75706f6e5f62617463685f76360000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161199491906179ab565b602060405180830381600087803b1580156119ae57600080fd5b505af11580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119e69190810190615b91565b91508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611a4c57600080fd5b505af1158015611a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a849190810190615b68565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168e6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611adb91906187fc565b600060405180830381600087803b158015611af557600080fd5b505af1158015611b09573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b629190617d90565b600060405180830381600087803b158015611b7c57600080fd5b505af1158015611b90573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663a815ff158d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611be9919061812f565b600060405180830381600087803b158015611c0357600080fd5b505af1158015611c17573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe98b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c709190617aab565b600060405180830381600087803b158015611c8a57600080fd5b505af1158015611c9e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe98a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611cf79190618a6b565b600060405180830381600087803b158015611d1157600080fd5b505af1158015611d25573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d7e919061845d565b600060405180830381600087803b158015611d9857600080fd5b505af1158015611dac573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e059190617bbf565b600060405180830381600087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e8c919061868c565b600060405180830381600087803b158015611ea657600080fd5b505af1158015611eba573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f139190618b7f565b600060405180830381600087803b158015611f2d57600080fd5b505af1158015611f41573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f9a91906185cd565b600060405180830381600087803b158015611fb457600080fd5b505af1158015611fc8573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120219190618a0f565b600060405180830381600087803b15801561203b57600080fd5b505af115801561204f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120a89190618da7565b600060405180830381600087803b1580156120c257600080fd5b505af11580156120d6573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161212f9190617df3565b600060405180830381600087803b15801561214957600080fd5b505af115801561215d573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121b69190618e8d565b600060405180830381600087803b1580156121d057600080fd5b505af11580156121e4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161223d919061887f565b600060405180830381600087803b15801561225757600080fd5b505af115801561226b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122c491906188db565b600060405180830381600087803b1580156122de57600080fd5b505af11580156122f2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161234b9190618cef565b600060405180830381600087803b15801561236557600080fd5b505af1158015612379573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123d29190617bed565b600060405180830381600087803b1580156123ec57600080fd5b505af1158015612400573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161245991906183d3565b600060405180830381600087803b15801561247357600080fd5b505af1158015612487573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124e0919061848b565b600060405180830381600087803b1580156124fa57600080fd5b505af115801561250e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161256791906180d3565b600060405180830381600087803b15801561258157600080fd5b505af1158015612595573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125ee919061815d565b600060405180830381600087803b15801561260857600080fd5b505af115801561261c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126759190618515565b600060405180830381600087803b15801561268f57600080fd5b505af11580156126a3573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126fc9190617fbf565b600060405180830381600087803b15801561271657600080fd5b505af115801561272a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161278391906188ad565b600060405180830381600087803b15801561279d57600080fd5b505af11580156127b1573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000","000000000000000000000000000000000000000000000002815260040161280a9190618744565b600060405180830381600087803b15801561282457600080fd5b505af1158015612838573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161289191906186ba565b600060405180830381600087803b1580156128ab57600080fd5b505af11580156128bf573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129189190617b07565b600060405180830381600087803b15801561293257600080fd5b505af1158015612946573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161299f9190618377565b600060405180830381600087803b1580156129b957600080fd5b505af11580156129cd573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a269190617f07565b600060405180830381600087803b158015612a4057600080fd5b505af1158015612a54573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612aad9190617e21565b600060405180830381600087803b158015612ac757600080fd5b505af1158015612adb573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b349190617c77565b600060405180830381600087803b158015612b4e57600080fd5b505af1158015612b62573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612bbb919061842f565b600060405180830381600087803b158015612bd557600080fd5b505af1158015612be9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c429190618f17565b600060405180830381600087803b158015612c5c57600080fd5b505af1158015612c70573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612cc991906182ed565b600060405180830381600087803b158015612ce357600080fd5b505af1158015612cf7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d509190618a99565b600060405180830381600087803b158015612d6a57600080fd5b505af1158015612d7e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612dd791906183a5565b600060405180830381600087803b158015612df157600080fd5b505af1158015612e05573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e5e9190617a7d565b600060405180830381600087803b158015612e7857600080fd5b505af1158015612e8c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ee591906184e7565b600060405180830381600087803b158015612eff57600080fd5b505af1158015612f13573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612f6c9190618e03565b600060405180830381600087803b158015612f8657600080fd5b505af1158015612f9a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ff39190617c1b565b600060405180830381600087803b15801561300d57600080fd5b505af1158015613021573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161307a9190617dc5565b600060405180830381600087803b15801561309457600080fd5b505af11580156130a8573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131019190618ac7565b600060405180830381600087803b15801561311b57600080fd5b505af115801561312f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131889190618b23565b600060405180830381600087803b1580156131a257600080fd5b505af11580156131b6573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161320f9190618ebb565b600060405180830381600087803b15801561322957600080fd5b505af115801561323d573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132969190617b91565b600060405180830381600087803b1580156132b057600080fd5b505af11580156132c4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161331d9190618571565b600060405180830381600087803b15801561333757600080fd5b505af115801561334b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016133a49190618bad565b600060405180830381600087803b1580156133be57600080fd5b505af11580156133d2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161342b9190617b63565b600060405180830381600087803b15801561344557600080fd5b505af1158015613459573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016134b291906182bf565b600060405180830381600087803b1580156134cc57600080fd5b505af11580156134e0573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613539919061801b565b600060405180830381600087803b15801561355357600080fd5b505af1158015613567573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016135c09190618c93565b600060405180830381600087803b1580156135da57600080fd5b505af11580156135ee573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016136479190617e4f565b600060405180830381600087803b15801561366157600080fd5b505af1158015613675573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016136ce9190618e31565b600060405180830381600087803b1580156136e857600080fd5b505af11580156136fc573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613755919061859f565b600060405180830381600087803b15801561376f57600080fd5b505af1158015613783573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016137dc9190618602565b60006040518083","0381600087803b1580156137f657600080fd5b505af115801561380a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016138639190617f63565b600060405180830381600087803b15801561387d57600080fd5b505af1158015613891573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016138ea9190617a4f565b600060405180830381600087803b15801561390457600080fd5b505af1158015613918573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016139719190618543565b600060405180830381600087803b15801561398b57600080fd5b505af115801561399f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016139f89190618bdb565b600060405180830381600087803b158015613a1257600080fd5b505af1158015613a26573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613a7f91906180a5565b600060405180830381600087803b158015613a9957600080fd5b505af1158015613aad573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613b06919061865e565b600060405180830381600087803b158015613b2057600080fd5b505af1158015613b34573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613b8d9190617ad9565b600060405180830381600087803b158015613ba757600080fd5b505af1158015613bbb573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c149190618d1d565b600060405180830381600087803b158015613c2e57600080fd5b505af1158015613c42573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c9b919061818b565b600060405180830381600087803b158015613cb557600080fd5b505af1158015613cc9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613d229190618235565b600060405180830381600087803b158015613d3c57600080fd5b505af1158015613d50573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613da99190618c09565b600060405180830381600087803b158015613dc357600080fd5b505af1158015613dd7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613e309190618ee9565b600060405180830381600087803b158015613e4a57600080fd5b505af1158015613e5e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613eb79190617f35565b600060405180830381600087803b158015613ed157600080fd5b505af1158015613ee5573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613f3e9190618349565b600060405180830381600087803b158015613f5857600080fd5b505af1158015613f6c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613fc59190617c49565b600060405180830381600087803b158015613fdf57600080fd5b505af1158015613ff3573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161404c91906187a0565b600060405180830381600087803b15801561406657600080fd5b505af115801561407a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016140d39190618993565b600060405180830381600087803b1580156140ed57600080fd5b505af1158015614101573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161415a9190618d4b565b600060405180830381600087803b15801561417457600080fd5b505af1158015614188573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016141e19190618909565b600060405180830381600087803b1580156141fb57600080fd5b505af115801561420f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161426891906186e8565b600060405180830381600087803b15801561428257600080fd5b505af1158015614296573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016142ef9190618772565b600060405180830381600087803b15801561430957600080fd5b505af115801561431d573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016143769190618263565b600060405180830381600087803b15801561439057600080fd5b505af11580156143a4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016143fd9190618077565b600060405180830381600087803b15801561441757600080fd5b505af115801561442b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016144849190618630565b600060405180830381600087803b15801561449e57600080fd5b505af11580156144b2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161450b9190618937565b600060405180830381600087803b15801561452557600080fd5b505af1158015614539573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016145929190617e7d565b600060405180830381600087803b1580156145ac57600080fd5b505af11580156145c0573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016146199190618af5565b600060405180830381600087803b15801561463357600080fd5b505af1158015614647573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016146a091906187ce565b600060405180830381600087803b1580156146ba57600080fd5b505af11580156146ce573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016147279190618c37565b600060405180830381600087803b15801561474157600080fd5b505af1158015614755573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016147ae9190618a3d565b600060405180830381600087803b1580156147c857600080fd5b505af11580156147dc573d6000803e3d6000fd5b505050508073ff","ffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016148359190618049565b600060405180830381600087803b15801561484f57600080fd5b505af1158015614863573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016148bc9190618c65565b600060405180830381600087803b1580156148d657600080fd5b505af11580156148ea573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016149439190617ed9565b600060405180830381600087803b15801561495d57600080fd5b505af1158015614971573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016149ca91906184b9565b600060405180830381600087803b1580156149e457600080fd5b505af11580156149f8573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614a519190618965565b600060405180830381600087803b158015614a6b57600080fd5b505af1158015614a7f573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614ad89190618207565b600060405180830381600087803b158015614af257600080fd5b505af1158015614b06573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614b5f9190617ca5565b600060405180830381600087803b158015614b7957600080fd5b505af1158015614b8d573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614be69190618716565b600060405180830381600087803b158015614c0057600080fd5b505af1158015614c14573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614c6d9190617cd3565b600060405180830381600087803b158015614c8757600080fd5b505af1158015614c9b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614cf49190617d62565b600060405180830381600087803b158015614d0e57600080fd5b505af1158015614d22573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614d7b9190618101565b600060405180830381600087803b158015614d9557600080fd5b505af1158015614da9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614e029190618e5f565b600060405180830381600087803b158015614e1c57600080fd5b505af1158015614e30573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614e899190618b51565b600060405180830381600087803b158015614ea357600080fd5b505af1158015614eb7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614f1091906181d9565b600060405180830381600087803b158015614f2a57600080fd5b505af1158015614f3e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614f979190618291565b600060405180830381600087803b158015614fb157600080fd5b505af1158015614fc5573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161501e9190617f91565b600060405180830381600087803b15801561503857600080fd5b505af115801561504c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016150a59190617fed565b600060405180830381600087803b1580156150bf57600080fd5b505af11580156150d3573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161512c9190617eab565b600060405180830381600087803b15801561514657600080fd5b505af115801561515a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016151b39190618dd5565b600060405180830381600087803b1580156151cd57600080fd5b505af11580156151e1573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161523a9190618851565b600060405180830381600087803b15801561525457600080fd5b505af1158015615268573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016152c1919061831b565b600060405180830381600087803b1580156152db57600080fd5b505af11580156152ef573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016153489190617d01565b600060405180830381600087803b15801561536257600080fd5b505af1158015615376573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016153cf9190618cc1565b600060405180830381600087803b1580156153e957600080fd5b505af11580156153fd573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016154569190618401565b600060405180830381600087803b15801561547057600080fd5b505af1158015615484573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016154dd9190618d79565b600060405180830381600087803b1580156154f757600080fd5b505af115801561550b573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016155649190617b35565b600060405180830381600087803b15801561557e57600080fd5b505af1158015615592573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638a42ebe9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016155eb91906189c1565b600060405180830381600087803b15801561560557600080fd5b505af1158015615619573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166331afac368e836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615674929190617a1f565b602060405180830381600087803b15801561568e57600080fd5b505af11580156156a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506156c69190810190615bba565b507f65ab75aac73351beb89dd09bf75c9d10516aa0312fabcfc476eee97b03a936e460016040516156f79190617962565b60405180910390a150505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061574f57805160ff191683800117855561577d565b8280016001018555821561577d579182015b8281111561577c578251825591602001919060010190615761565b5b50905061578a91906157fe565b5090565b8280548282559060005260206000209081019282156157ed5760005260206000209182015b828111156157ec57828290805460018160011615610100020316600290046157dc929190615823565b50916001019190","","","","6f65565b90506187f660208301846178a1565b92915050565b6000604082019050818103600083015261881581616f9c565b905081810360208301526188298184615e90565b905092915050565b6000602082019050818103600083015261884a81616fd3565b9050919050565b6000604082019050818103600083015261886a81617030565b905061887960208301846178a1565b92915050565b6000604082019050818103600083015261889881617067565b90506188a760208301846178a1565b92915050565b600060408201905081810360008301526188c68161709e565b90506188d560208301846178a1565b92915050565b600060408201905081810360008301526188f4816170d5565b905061890360208301846178a1565b92915050565b600060408201905081810360008301526189228161710c565b905061893160208301846178a1565b92915050565b6000604082019050818103600083015261895081617143565b905061895f60208301846178a1565b92915050565b6000604082019050818103600083015261897e8161717a565b905061898d60208301846178a1565b92915050565b600060408201905081810360008301526189ac816171c1565b90506189bb60208301846178a1565b92915050565b600060408201905081810360008301526189da816171f8565b90506189e960208301846178a1565b92915050565b60006020820190508181036000830152618a088161722f565b9050919050565b60006040820190508181036000830152618a288161722f565b9050618a3760208301846178a1565b92915050565b60006040820190508181036000830152618a5681617266565b9050618a6560208301846178a1565b92915050565b60006040820190508181036000830152618a848161729d565b9050618a9360208301846178a1565b92915050565b60006040820190508181036000830152618ab2816172d4565b9050618ac160208301846178a1565b92915050565b60006040820190508181036000830152618ae08161730b565b9050618aef60208301846178a1565b92915050565b60006040820190508181036000830152618b0e81617342565b9050618b1d60208301846178a1565b92915050565b60006040820190508181036000830152618b3c816173b0565b9050618b4b60208301846178a1565b92915050565b60006040820190508181036000830152618b6a816173e7565b9050618b7960208301846178a1565b92915050565b60006040820190508181036000830152618b988161741e565b9050618ba760208301846178a1565b92915050565b60006040820190508181036000830152618bc681617455565b9050618bd560208301846178a1565b92915050565b60006040820190508181036000830152618bf48161748c565b9050618c0360208301846178a1565b92915050565b60006040820190508181036000830152618c22816174c3565b9050618c3160208301846178a1565b92915050565b60006040820190508181036000830152618c50816174fa565b9050618c5f60208301846178a1565b92915050565b60006040820190508181036000830152618c7e81617531565b9050618c8d60208301846178a1565b92915050565b60006040820190508181036000830152618cac81617568565b9050618cbb60208301846178a1565b92915050565b60006040820190508181036000830152618cda8161759f565b9050618ce960208301846178a1565b92915050565b60006040820190508181036000830152618d08816175d6565b9050618d1760208301846178a1565b92915050565b60006040820190508181036000830152618d368161760d565b9050618d4560208301846178a1565b92915050565b60006040820190508181036000830152618d6481617644565b9050618d7360208301846178a1565b92915050565b60006040820190508181036000830152618d928161767b565b9050618da160208301846178a1565b92915050565b60006040820190508181036000830152618dc0816176b2565b9050618dcf60208301846178a1565b92915050565b60006040820190508181036000830152618dee816176e9565b9050618dfd60208301846178a1565b92915050565b60006040820190508181036000830152618e1c81617720565b9050618e2b60208301846178a1565b92915050565b60006040820190508181036000830152618e4a81617757565b9050618e5960208301846178a1565b92915050565b60006040820190508181036000830152618e788161778e565b9050618e8760208301846178a1565b92915050565b60006040820190508181036000830152618ea6816177c5565b9050618eb560208301846178a1565b92915050565b60006040820190508181036000830152618ed4816177fc565b9050618ee360208301846178a1565b92915050565b60006040820190508181036000830152618f0281617833565b9050618f1160208301846178a1565b92915050565b60006040820190508181036000830152618f308161786a565b9050618f3f60208301846178a1565b92915050565b6000604051905081810181811067ffffffffffffffff82111715618f6857600080fd5b8060405250919050565b600067ffffffffffffffff821115618f8957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115618fb557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061904b82618fe0565b9050919050565b600061905d82618fe0565b9050919050565b600061906f82618fe0565b9050919050565b600061908182618fe0565b9050919050565b6000819050919050565b6000819050919050565b60006190a782618fe0565b9050919050565b60006190b982618fe0565b9050919050565b82818337600083830152505050565b60005b838110156190ed5780820151818401526020810190506190d2565b838111156190fc576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820477b529c7b791849d3d80d2ca947e489e13fa6a986f3b5805dd494f5ef34c2f46c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"_methodName\",\"type\":\"string\"}],\"name\":\"validPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\"}],\"name\":\"registerParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountAddress\",\"type\":\"address\"},{\"name\":\"_methodName\",\"type\":\"string\"}],\"name\":\"addPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_couponType\",\"type\":\"uint256\"}],\"name\":\"verifyCouponType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"string\"},{\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareString\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"}],\"name\":\"unregisterParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"uintTostring\",\"outputs\":[{\"name\":\"c\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_batchIdStr\",\"type\":\"string\"}],\"name\":\"getBatchNum\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_couponType\",\"type\":\"uint256\"}],\"name\":\"addSupportCouponType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"bytes\"},{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"compareBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchIdStr\",\"type\":\"string\"}],\"name\":\"verfiyBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchIdStr\",\"type\":\"string\"},{\"name\":\"_ownerMerchantAddress\",\"type\":\"address\"},{\"name\":\"_secretKey\",\"type\":\"bytes\"},{\"name\":\"_couponType\",\"type\":\"uint256\"},{\"name\":\"_status\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_allowUseStartTime\",\"type\":\"uint256\"},{\"name\":\"_allowUseEndTime\",\"type\":\"uint256\"},{\"name\":\"_rule\",\"type\":\"bytes\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isSuccess\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"LogEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"logInfo\",\"type\":\"bytes\"}],\"name\":\"SIMPLE_LOG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_couponType\",\"type\":\"uint256\"}],\"name\":\"OPERATE_ADD_SUPPORT_COUPON_TYPE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ownerMerchantAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_batchId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_couponType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_allowUseStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_allowUseEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rule\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"OPERATE_COUPON_BATCH_CREATE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"OPERATE_COUPON_BATCH_SET_STATUS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"OPERATE_COUPON_BATCH_SET_COUNT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"consumerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"couponAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"obtainTime\",\"type\":\"uint256\"}],\"name\":\"OPERATE_RECEIVE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"obtainTime\",\"type\":\"uint256\"}],\"name\":\"OPERATE_TRANSFER\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"cancelUserAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"consumeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"consumeAmount\",\"type\":\"uint256\"}],\"name\":\"OPERATE_CANCEL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"cancelUserAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"consumeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"consumeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"couponAmount\",\"type\":\"uint256\"}],\"name\":\"OPERATE_CANCEL_M\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"operateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"couponId\",\"type\":\"bytes32\"}],\"name\":\"OPERATE_EXPIRE\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_VALIDPERMISSION = "validPermission";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_ADDPERMISSION = "addPermission";

    public static final String FUNC_VERIFYCOUPONTYPE = "verifyCouponType";

    public static final String FUNC_COMPARESTRING = "compareString";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_UINTTOSTRING = "uintTostring";

    public static final String FUNC_GETBATCHNUM = "getBatchNum";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_ADDSUPPORTCOUPONTYPE = "addSupportCouponType";

    public static final String FUNC_COMPAREBYTES = "compareBytes";

    public static final String FUNC_VERFIYBATCH = "verfiyBatch";

    public static final String FUNC_CREATE = "create";

    public static final Event LOGEVENT_EVENT = new Event("LogEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SIMPLE_LOG_EVENT = new Event("SIMPLE_LOG", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event OPERATE_ADD_SUPPORT_COUPON_TYPE_EVENT = new Event("OPERATE_ADD_SUPPORT_COUPON_TYPE", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_COUPON_BATCH_CREATE_EVENT = new Event("OPERATE_COUPON_BATCH_CREATE", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_COUPON_BATCH_SET_STATUS_EVENT = new Event("OPERATE_COUPON_BATCH_SET_STATUS", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_COUPON_BATCH_SET_COUNT_EVENT = new Event("OPERATE_COUPON_BATCH_SET_COUNT", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_RECEIVE_EVENT = new Event("OPERATE_RECEIVE", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_TRANSFER_EVENT = new Event("OPERATE_TRANSFER", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_CANCEL_EVENT = new Event("OPERATE_CANCEL", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_CANCEL_M_EVENT = new Event("OPERATE_CANCEL_M", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATE_EXPIRE_EVENT = new Event("OPERATE_EXPIRE", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected TestMultiEntry(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TestMultiEntry(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TestMultiEntry(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TestMultiEntry(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<Boolean> validPermission(String _methodName) {
        final Function function = new Function(FUNC_VALIDPERMISSION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_methodName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> registerParallelFunction(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(criticalSize)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerParallelFunction(String functionName, BigInteger criticalSize, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(criticalSize)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerParallelFunctionSeq(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(criticalSize)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getRegisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> addPermission(String _accountAddress, String _methodName) {
        final Function function = new Function(
                FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_accountAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_methodName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addPermission(String _accountAddress, String _methodName, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_accountAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_methodName)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addPermissionSeq(String _accountAddress, String _methodName) {
        final Function function = new Function(
                FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_accountAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_methodName)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getAddPermissionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getAddPermissionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> verifyCouponType(BigInteger _couponType) {
        final Function function = new Function(
                FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyCouponType(BigInteger _couponType, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyCouponTypeSeq(BigInteger _couponType) {
        final Function function = new Function(
                FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getVerifyCouponTypeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getVerifyCouponTypeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERIFYCOUPONTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<Boolean> compareString(String a, String b) {
        final Function function = new Function(FUNC_COMPARESTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(a), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> unregisterParallelFunction(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unregisterParallelFunctionSeq(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getUnregisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<String> uintTostring(BigInteger i) {
        final Function function = new Function(FUNC_UINTTOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getBatchNum(String _batchIdStr) {
        final Function function = new Function(FUNC_GETBATCHNUM, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> enableParallel() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void enableParallel(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String enableParallelSeq() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> addSupportCouponType(BigInteger _couponType) {
        final Function function = new Function(
                FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addSupportCouponType(BigInteger _couponType, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addSupportCouponTypeSeq(BigInteger _couponType) {
        final Function function = new Function(
                FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getAddSupportCouponTypeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getAddSupportCouponTypeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDSUPPORTCOUPONTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<Boolean> compareBytes(byte[] a, byte[] b) {
        final Function function = new Function(FUNC_COMPAREBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(a), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> verfiyBatch(String _batchIdStr) {
        final Function function = new Function(
                FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verfiyBatch(String _batchIdStr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verfiyBatchSeq(String _batchIdStr) {
        final Function function = new Function(
                FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getVerfiyBatchInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getVerfiyBatchOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERFIYBATCH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> create(String _batchIdStr, String _ownerMerchantAddress, byte[] _secretKey, BigInteger _couponType, BigInteger _status, BigInteger _startTime, BigInteger _endTime, BigInteger _allowUseStartTime, BigInteger _allowUseEndTime, byte[] _rule, BigInteger _count) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_ownerMerchantAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_secretKey), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_startTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_endTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseStartTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseEndTime), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_rule), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void create(String _batchIdStr, String _ownerMerchantAddress, byte[] _secretKey, BigInteger _couponType, BigInteger _status, BigInteger _startTime, BigInteger _endTime, BigInteger _allowUseStartTime, BigInteger _allowUseEndTime, byte[] _rule, BigInteger _count, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_ownerMerchantAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_secretKey), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_startTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_endTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseStartTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseEndTime), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_rule), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_count)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createSeq(String _batchIdStr, String _ownerMerchantAddress, byte[] _secretKey, BigInteger _couponType, BigInteger _status, BigInteger _startTime, BigInteger _endTime, BigInteger _allowUseStartTime, BigInteger _allowUseEndTime, byte[] _rule, BigInteger _count) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_batchIdStr), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_ownerMerchantAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_secretKey), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_couponType), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_status), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_startTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_endTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseStartTime), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_allowUseEndTime), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_rule), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_count)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple11<String, String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger> getCreateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple11<String, String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (BigInteger) results.get(8).getValue(), 
                (byte[]) results.get(9).getValue(), 
                (BigInteger) results.get(10).getValue()
                );
    }

    public List<LogEventEventResponse> getLogEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGEVENT_EVENT, transactionReceipt);
        ArrayList<LogEventEventResponse> responses = new ArrayList<LogEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogEventEventResponse typedResponse = new LogEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.isSuccess = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.desc = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerLogEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerLogEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SIMPLE_LOGEventResponse> getSIMPLE_LOGEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIMPLE_LOG_EVENT, transactionReceipt);
        ArrayList<SIMPLE_LOGEventResponse> responses = new ArrayList<SIMPLE_LOGEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SIMPLE_LOGEventResponse typedResponse = new SIMPLE_LOGEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.logInfo = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSIMPLE_LOGEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SIMPLE_LOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerSIMPLE_LOGEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SIMPLE_LOG_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse> getOPERATE_ADD_SUPPORT_COUPON_TYPEEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_ADD_SUPPORT_COUPON_TYPE_EVENT, transactionReceipt);
        ArrayList<OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse> responses = new ArrayList<OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse typedResponse = new OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._couponType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_ADD_SUPPORT_COUPON_TYPEEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_ADD_SUPPORT_COUPON_TYPE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_ADD_SUPPORT_COUPON_TYPEEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_ADD_SUPPORT_COUPON_TYPE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_COUPON_BATCH_CREATEEventResponse> getOPERATE_COUPON_BATCH_CREATEEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_COUPON_BATCH_CREATE_EVENT, transactionReceipt);
        ArrayList<OPERATE_COUPON_BATCH_CREATEEventResponse> responses = new ArrayList<OPERATE_COUPON_BATCH_CREATEEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_COUPON_BATCH_CREATEEventResponse typedResponse = new OPERATE_COUPON_BATCH_CREATEEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._ownerMerchantAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._batchId = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._couponType = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._status = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._startTime = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse._endTime = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse._allowUseStartTime = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse._allowUseEndTime = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
            typedResponse._rule = (byte[]) eventValues.getNonIndexedValues().get(10).getValue();
            typedResponse._count = (BigInteger) eventValues.getNonIndexedValues().get(11).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_COUPON_BATCH_CREATEEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_CREATE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_COUPON_BATCH_CREATEEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_CREATE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_COUPON_BATCH_SET_STATUSEventResponse> getOPERATE_COUPON_BATCH_SET_STATUSEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_COUPON_BATCH_SET_STATUS_EVENT, transactionReceipt);
        ArrayList<OPERATE_COUPON_BATCH_SET_STATUSEventResponse> responses = new ArrayList<OPERATE_COUPON_BATCH_SET_STATUSEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_COUPON_BATCH_SET_STATUSEventResponse typedResponse = new OPERATE_COUPON_BATCH_SET_STATUSEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.batchId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_COUPON_BATCH_SET_STATUSEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_SET_STATUS_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_COUPON_BATCH_SET_STATUSEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_SET_STATUS_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_COUPON_BATCH_SET_COUNTEventResponse> getOPERATE_COUPON_BATCH_SET_COUNTEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_COUPON_BATCH_SET_COUNT_EVENT, transactionReceipt);
        ArrayList<OPERATE_COUPON_BATCH_SET_COUNTEventResponse> responses = new ArrayList<OPERATE_COUPON_BATCH_SET_COUNTEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_COUPON_BATCH_SET_COUNTEventResponse typedResponse = new OPERATE_COUPON_BATCH_SET_COUNTEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.batchId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_COUPON_BATCH_SET_COUNTEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_SET_COUNT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_COUPON_BATCH_SET_COUNTEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_COUPON_BATCH_SET_COUNT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_RECEIVEEventResponse> getOPERATE_RECEIVEEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_RECEIVE_EVENT, transactionReceipt);
        ArrayList<OPERATE_RECEIVEEventResponse> responses = new ArrayList<OPERATE_RECEIVEEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_RECEIVEEventResponse typedResponse = new OPERATE_RECEIVEEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.batchId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.consumerAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.couponAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.obtainTime = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_RECEIVEEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_RECEIVE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_RECEIVEEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_RECEIVE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_TRANSFEREventResponse> getOPERATE_TRANSFEREvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_TRANSFER_EVENT, transactionReceipt);
        ArrayList<OPERATE_TRANSFEREventResponse> responses = new ArrayList<OPERATE_TRANSFEREventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_TRANSFEREventResponse typedResponse = new OPERATE_TRANSFEREventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.fromAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.toAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.obtainTime = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_TRANSFEREventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_TRANSFER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_TRANSFEREventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_TRANSFER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_CANCELEventResponse> getOPERATE_CANCELEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_CANCEL_EVENT, transactionReceipt);
        ArrayList<OPERATE_CANCELEventResponse> responses = new ArrayList<OPERATE_CANCELEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_CANCELEventResponse typedResponse = new OPERATE_CANCELEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.cancelUserAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.consumeTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.consumeAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_CANCELEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_CANCEL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_CANCELEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_CANCEL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_CANCEL_MEventResponse> getOPERATE_CANCEL_MEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_CANCEL_M_EVENT, transactionReceipt);
        ArrayList<OPERATE_CANCEL_MEventResponse> responses = new ArrayList<OPERATE_CANCEL_MEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_CANCEL_MEventResponse typedResponse = new OPERATE_CANCEL_MEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.cancelUserAddress = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.consumeTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.consumeAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.couponAmount = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_CANCEL_MEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_CANCEL_M_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_CANCEL_MEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_CANCEL_M_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<OPERATE_EXPIREEventResponse> getOPERATE_EXPIREEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATE_EXPIRE_EVENT, transactionReceipt);
        ArrayList<OPERATE_EXPIREEventResponse> responses = new ArrayList<OPERATE_EXPIREEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OPERATE_EXPIREEventResponse typedResponse = new OPERATE_EXPIREEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operateAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.couponId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerOPERATE_EXPIREEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_EXPIRE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerOPERATE_EXPIREEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(OPERATE_EXPIRE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static TestMultiEntry load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TestMultiEntry(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TestMultiEntry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TestMultiEntry(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TestMultiEntry load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TestMultiEntry(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TestMultiEntry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TestMultiEntry(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TestMultiEntry> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TestMultiEntry.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TestMultiEntry> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TestMultiEntry.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TestMultiEntry> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TestMultiEntry.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TestMultiEntry> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TestMultiEntry.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class LogEventEventResponse {
        public Log log;

        public Boolean isSuccess;

        public String desc;
    }

    public static class SIMPLE_LOGEventResponse {
        public Log log;

        public byte[] logInfo;
    }

    public static class OPERATE_ADD_SUPPORT_COUPON_TYPEEventResponse {
        public Log log;

        public String operateAddress;

        public BigInteger _couponType;
    }

    public static class OPERATE_COUPON_BATCH_CREATEEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public String _ownerMerchantAddress;

        public String _batchId;

        public BigInteger _couponType;

        public BigInteger _status;

        public BigInteger _startTime;

        public BigInteger _endTime;

        public BigInteger _allowUseStartTime;

        public BigInteger _allowUseEndTime;

        public byte[] _rule;

        public BigInteger _count;
    }

    public static class OPERATE_COUPON_BATCH_SET_STATUSEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public BigInteger batchId;
    }

    public static class OPERATE_COUPON_BATCH_SET_COUNTEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public BigInteger batchId;

        public BigInteger count;
    }

    public static class OPERATE_RECEIVEEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public BigInteger batchId;

        public String consumerAddress;

        public byte[] couponId;

        public BigInteger couponAmount;

        public BigInteger obtainTime;
    }

    public static class OPERATE_TRANSFEREventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public String fromAddress;

        public String toAddress;

        public byte[] couponId;

        public BigInteger obtainTime;
    }

    public static class OPERATE_CANCELEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public byte[] couponId;

        public String cancelUserAddress;

        public BigInteger consumeTime;

        public BigInteger consumeAmount;
    }

    public static class OPERATE_CANCEL_MEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public byte[] couponId;

        public String cancelUserAddress;

        public BigInteger consumeTime;

        public BigInteger consumeAmount;

        public BigInteger couponAmount;
    }

    public static class OPERATE_EXPIREEventResponse {
        public Log log;

        public BigInteger action;

        public String operateAddress;

        public byte[] couponId;
    }
}
