package org.fisco.bcos.channel.test.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class OkD extends Contract {
    public static String BINARY = "60806040523480156200001157600080fd5b50600080600060016000800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506402540be40060006001018190555060028060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060026001018190555061100192508273ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200011390620007d0565b602060405180830381600087803b1580156200012e57600080fd5b505af115801562000143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000169919081019062000593565b5061100192508273ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620001c490620007ae565b602060405180830381600087803b158015620001df57600080fd5b505af1158015620001f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200021a919081019062000567565b91508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200028157600080fd5b505af115801562000296573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002bc91908101906200053b565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000313906200081c565b600060405180830381600087803b1580156200032e57600080fd5b505af115801562000343573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba746000600101546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620003a39190620008bc565b600060405180830381600087803b158015620003be57600080fd5b505af1158015620003d3573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200042c9062000885565b600060405180830381600087803b1580156200044757600080fd5b505af11580156200045c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba746002600101546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620004bc919062000853565b600060405180830381600087803b158015620004d757600080fd5b505af1158015620004ec573d6000803e3d6000fd5b505050505050506200094a565b600062000507825162000918565b905092915050565b60006200051d82516200092c565b905092915050565b600062000533825162000940565b905092915050565b6000602082840312156200054e57600080fd5b60006200055e84828501620004f9565b91505092915050565b6000602082840312156200057a57600080fd5b60006200058a848285016200050f565b91505092915050565b600060208284031215620005a657600080fd5b6000620005b68482850162000525565b91505092915050565b620005ca816200090e565b82525050565b6000600482527f745f6f6b000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f30783100000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f30783200000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f66726f6d5f6163636f75740000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f746f5f62616c616e6365000000000000000000000000000000000000000000006020830152604082019050919050565b6000602182527f66726f6d5f62616c616e63652c746f5f6163636f75742c746f5f62616c616e6360208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000600982527f746f5f6163636f757400000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f66726f6d5f62616c616e636500000000000000000000000000000000000000006020830152604082019050919050565b60006020820190508181036000830152620007c981620005d0565b9050919050565b60006060820190508181036000830152620007eb81620005d0565b90508181036020830152620008008162000675565b905081810360408301526200081581620006e3565b9050919050565b60006040820190508181036000830152620008378162000675565b905081810360208301526200084c8162000607565b9050919050565b600060408201905081810360008301526200086e81620006ac565b90506200087f6020830184620005bf565b92915050565b60006040820190508181036000830152620008a08162000740565b90508181036020830152620008b5816200063e565b9050919050565b60006040820190508181036000830152620008d78162000777565b9050620008e86020830184620005bf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200092582620008ee565b9050919050565b60006200093982620008ee565b9050919050565b6000819050919050565b610afa806200095a6000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636d4ce63c14610051578063abe181b51461007c575b600080fd5b34801561005d57600080fd5b506100666100a5565b6040516100739190610870565b60405180910390f35b34801561008857600080fd5b506100a3600480360361009e919081019061067e565b6100b2565b005b6000600260010154905090565b6000806000808460006001015412806100d657506002600101548560026001015401125b156100e057610555565b84600060010154036000600101819055508460026001016000828254019250508190555061100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161015c906108bb565b602060405180830381600087803b15801561017657600080fd5b505af115801561018a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101ae919081019061062c565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561021457600080fd5b505af1158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061024c9190810190610603565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102a391906108db565b600060405180830381600087803b1580156102bd57600080fd5b505af11580156102d1573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba746000600101546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161032f9190610971565b600060405180830381600087803b15801561034957600080fd5b505af115801561035d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103b49061093e565b600060405180830381600087803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba746002600101546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104409190610910565b600060405180830381600087803b15801561045a57600080fd5b505af115801561046e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3687846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104c992919061088b565b602060405180830381600087803b1580156104e357600080fd5b505af11580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061051b9190810190610655565b90507f66f7705280112a4d1145399e0414adc43a2d6974b487710f417edcf7d4a39d718160405161054c9190610870565b60405180910390a15b505050505050565b60006105698251610a2d565b905092915050565b600061057d8251610a3f565b905092915050565b60006105918235610a51565b905092915050565b60006105a58251610a51565b905092915050565b600082601f83011215156105c057600080fd5b81356105d36105ce826109cc565b61099f565b915080825260208301602083018583830111156105ef57600080fd5b6105fa838284610a6d565b50505092915050565b60006020828403121561061557600080fd5b60006106238482850161055d565b91505092915050565b60006020828403121561063e57600080fd5b600061064c84828501610571565b91505092915050565b60006020828403121561066757600080fd5b600061067584828501610599565b91505092915050565b6000806040838503121561069157600080fd5b600083013567ffffffffffffffff8111156106ab57600080fd5b6106b7858286016105ad565b92505060206106c885828601610585565b9150509250929050565b6106db81610a5b565b82525050565b6106ea81610a23565b82525050565b60006106fb826109f8565b80845261070f816020860160208601610a7c565b61071881610aaf565b602085010191505092915050565b6000600482527f745f6f6b000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f30783200000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f66726f6d5f6163636f75740000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f746f5f62616c616e6365000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f746f5f6163636f757400000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f66726f6d5f62616c616e636500000000000000000000000000000000000000006020830152604082019050919050565b600060208201905061088560008301846106e1565b92915050565b600060408201905081810360008301526108a581856106f0565b90506108b460208301846106d2565b9392505050565b600060208201905081810360008301526108d481610726565b9050919050565b600060408201905081810360008301526108f481610794565b9050818103602083015261090881846106f0565b905092915050565b60006040820190508181036000830152610929816107cb565b905061093860208301846106e1565b92915050565b6000604082019050818103600083015261095781610802565b9050818103602083015261096a8161075d565b9050919050565b6000604082019050818103600083015261098a81610839565b905061099960208301846106e1565b92915050565b6000604051905081810181811067ffffffffffffffff821117156109c257600080fd5b8060405250919050565b600067ffffffffffffffff8211156109e357600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a3882610a03565b9050919050565b6000610a4a82610a03565b9050919050565b6000819050919050565b6000610a6682610a03565b9050919050565b82818337600083830152505050565b60005b83811015610a9a578082015181840152602081019050610a7f565b83811115610aa9576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582038a9686d0a72b982630e39aba597bb523f9898b9e0c7239a8a412511cf2b581c6c6578706572696d656e74616cf50037";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_accout\",\"type\":\"string\"},{\"name\":\"num\",\"type\":\"int256\"}],\"name\":\"trans\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"insertResult\",\"type\":\"event\"}]";

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static String SM_BINARY = "60806040523480156200001157600080fd5b50600080600060016000800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506402540be40060006001018190555060028060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060026001018190555061100192508273ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200011390620007d0565b602060405180830381600087803b1580156200012e57600080fd5b505af115801562000143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000169919081019062000593565b5061100192508273ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620001c490620007ae565b602060405180830381600087803b158015620001df57600080fd5b505af1158015620001f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200021a919081019062000567565b91508173ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200028157600080fd5b505af115801562000296573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002bc91908101906200053b565b90508073ffffffffffffffffffffffffffffffffffffffff16631a391cb46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620003139062000880565b600060405180830381600087803b1580156200032e57600080fd5b505af115801562000343573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def426986000600101546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620003a391906200081c565b600060405180830381600087803b158015620003be57600080fd5b505af1158015620003d3573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631a391cb46040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200042c90620008b7565b600060405180830381600087803b1580156200044757600080fd5b505af11580156200045c573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def426986002600101546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620004bc91906200084e565b600060405180830381600087803b158015620004d757600080fd5b505af1158015620004ec573d6000803e3d6000fd5b505050505050506200094a565b600062000507825162000918565b905092915050565b60006200051d82516200092c565b905092915050565b600062000533825162000940565b905092915050565b6000602082840312156200054e57600080fd5b60006200055e84828501620004f9565b91505092915050565b6000602082840312156200057a57600080fd5b60006200058a848285016200050f565b91505092915050565b600060208284031215620005a657600080fd5b6000620005b68482850162000525565b91505092915050565b620005ca816200090e565b82525050565b6000600482527f745f6f6b000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f30783200000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f66726f6d5f62616c616e636500000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f30783100000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f746f5f62616c616e6365000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f66726f6d5f6163636f75740000000000000000000000000000000000000000006020830152604082019050919050565b6000602182527f66726f6d5f62616c616e63652c746f5f6163636f75742c746f5f62616c616e6360208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000600982527f746f5f6163636f757400000000000000000000000000000000000000000000006020830152604082019050919050565b60006020820190508181036000830152620007c981620005d0565b9050919050565b60006060820190508181036000830152620007eb81620005d0565b905081810360208301526200080081620006e3565b9050818103604083015262000815816200071a565b9050919050565b6000604082019050818103600083015262000837816200063e565b9050620008486020830184620005bf565b92915050565b600060408201905081810360008301526200086981620006ac565b90506200087a6020830184620005bf565b92915050565b600060408201905081810360008301526200089b81620006e3565b90508181036020830152620008b08162000675565b9050919050565b60006040820190508181036000830152620008d28162000777565b90508181036020830152620008e78162000607565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200092582620008ee565b9050919050565b60006200093982620008ee565b9050919050565b6000819050919050565b610afa806200095a6000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063299f7f9d1461005157806390749a5e1461007c575b600080fd5b34801561005d57600080fd5b506100666100a5565b6040516100739190610870565b60405180910390f35b34801561008857600080fd5b506100a3600480360361009e919081019061067e565b6100b2565b005b6000600260010154905090565b6000806000808460006001015412806100d657506002600101548560026001015401125b156100e057610555565b84600060010154036000600101819055508460026001016000828254019250508190555061100193508373ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161015c906108bb565b602060405180830381600087803b15801561017657600080fd5b505af115801561018a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101ae919081019061062c565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561021457600080fd5b505af1158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061024c9190810190610603565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102a39190610937565b600060405180830381600087803b1580156102bd57600080fd5b505af11580156102d1573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def426986000600101546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161032f91906108db565b600060405180830381600087803b15801561034957600080fd5b505af115801561035d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb46040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103b49061096c565b600060405180830381600087803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def426986002600101546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104409190610909565b600060405180830381600087803b15801561045a57600080fd5b505af115801561046e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c087846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104c992919061088b565b602060405180830381600087803b1580156104e357600080fd5b505af11580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061051b9190810190610655565b90507f11edf97b45aa6c006853fb598a4a9be2e678d9498feb5e6c1f389b491e12bc4a8160405161054c9190610870565b60405180910390a15b505050505050565b60006105698251610a2d565b905092915050565b600061057d8251610a3f565b905092915050565b60006105918235610a51565b905092915050565b60006105a58251610a51565b905092915050565b600082601f83011215156105c057600080fd5b81356105d36105ce826109cc565b61099f565b915080825260208301602083018583830111156105ef57600080fd5b6105fa838284610a6d565b50505092915050565b60006020828403121561061557600080fd5b60006106238482850161055d565b91505092915050565b60006020828403121561063e57600080fd5b600061064c84828501610571565b91505092915050565b60006020828403121561066757600080fd5b600061067584828501610599565b91505092915050565b6000806040838503121561069157600080fd5b600083013567ffffffffffffffff8111156106ab57600080fd5b6106b7858286016105ad565b92505060206106c885828601610585565b9150509250929050565b6106db81610a5b565b82525050565b6106ea81610a23565b82525050565b60006106fb826109f8565b80845261070f816020860160208601610a7c565b61071881610aaf565b602085010191505092915050565b6000600482527f745f6f6b000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f30783200000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f66726f6d5f62616c616e636500000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f746f5f62616c616e6365000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f66726f6d5f6163636f75740000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f746f5f6163636f757400000000000000000000000000000000000000000000006020830152604082019050919050565b600060208201905061088560008301846106e1565b92915050565b600060408201905081810360008301526108a581856106f0565b90506108b460208301846106d2565b9392505050565b600060208201905081810360008301526108d481610726565b9050919050565b600060408201905081810360008301526108f481610794565b905061090360208301846106e1565b92915050565b60006040820190508181036000830152610922816107cb565b905061093160208301846106e1565b92915050565b6000604082019050818103600083015261095081610802565b9050818103602083015261096481846106f0565b905092915050565b6000604082019050818103600083015261098581610839565b905081810360208301526109988161075d565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156109c257600080fd5b8060405250919050565b600067ffffffffffffffff8211156109e357600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a3882610a03565b9050919050565b6000610a4a82610a03565b9050919050565b6000819050919050565b6000610a6682610a03565b9050919050565b82818337600083830152505050565b60005b83811015610a9a578082015181840152602081019050610a7f565b83811115610aa9576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820e34b8064ace13370a0675db28e094463384e24c416c1f9af6595603b8894de556c6578706572696d656e74616cf50037";

    public static final String FUNC_GET = "get";

    public static final String FUNC_TRANS = "trans";

    public static final Event INSERTRESULT_EVENT = new Event("insertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected OkD(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected OkD(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected OkD(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected OkD(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<BigInteger> get() {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> trans(String from_accout, BigInteger num) {
        final Function function = new Function(
                FUNC_TRANS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from_accout), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void trans(String from_accout, BigInteger num, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from_accout), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(num)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transSeq(String from_accout, BigInteger num) {
        final Function function = new Function(
                FUNC_TRANS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from_accout), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(num)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getTransInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerinsertResultEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(INSERTRESULT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerinsertResultEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(INSERTRESULT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static OkD load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OkD(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static OkD load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OkD(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static OkD load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new OkD(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static OkD load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new OkD(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<OkD> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OkD.class, web3j, credentials, contractGasProvider, getBinary(), "");
    }

    public static RemoteCall<OkD> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(OkD.class, web3j, transactionManager, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<OkD> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OkD.class, web3j, credentials, gasPrice, gasLimit, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<OkD> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(OkD.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), "");
    }

    public static class InsertResultEventResponse {
        public Log log;

        public BigInteger count;
    }
}
